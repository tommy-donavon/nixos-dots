{
  config,
  pkgs,
  lib,
  namespace,
  ...
}:
with lib;
with lib.${namespace};
let
  cfg = config.${namespace}.nix;
in
{
  options.${namespace}.nix = with types; {
    enable = mkBoolOpt true "Whether or not to manage nix configuration.";

    # switch back to lix when aarch64-darwin builds are working again
    package = mkOpt package pkgs.nix "Which nix package to use.";
  };

  config = mkIf cfg.enable {
    environment.systemPackages = with pkgs; [
      deploy-rs
      nixfmt-rfc-style
      nix-index
      nix-prefetch-git
    ];

    nix =
      let
        users = [
          "root"
          "@wheel"
          "nix-builder"
          config.${namespace}.user.name
        ];
      in
      {
        inherit (cfg) package;

        settings = {
          experimental-features = "nix-command flakes";
          http-connections = 50;
          warn-dirty = false;
          log-lines = 50;

          allow-import-from-derivation = true;

          trusted-users = users;
          allowed-users = users;

          # NOTE: This configuration is generated by nix-installer so I'm adding it here in
          # case it becomes important.
          extra-nix-path = "nixpkgs=flake:nixpkgs";
          # build-users-group = "nixbld";
        };
        #// (lib.optionalAttrs config.${namespace}.tools.direnv.enable {
        #  keep-outputs = true;
        #  keep-derivations = true;
        #});
        optimise.automatic = true;
        gc = {
          automatic = true;
          interval = {
            Day = 7;
          };
          options = "--delete-older-than 30d";
          user = config.${namespace}.user.name;
        };

        # flake-utils-plus
        generateRegistryFromInputs = true;
        generateNixPathFromInputs = true;
        linkInputs = true;
      };
  };
}
